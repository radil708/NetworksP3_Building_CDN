#!/usr/bin/env python3
import os
import argparse

DEFAULT_S_KEY = "~/.ssh/id_ed25519.pub"
DEFAULT_R_KEY = "~/.ssh/id_rsa"
DEFAULT_USERNAME = "team_t"
DEFAULT_PORT = 40015
DEFAULT_DOMAIN = "cs5700cdn.example.com"
DNS_FILE_DEPENDENCIES = ["dns.py", "dnsDriver.py", "dnsserver", "geo_db.py"]

DNS_NODE = "p5-dns.5700.network"
HTTP_NODES = [
    "p5-http-a.5700.network",
    "p5-http-b.5700.network",
    "p5-http-c.5700.network",
    "p5-http-d.5700.network",
    "p5-http-e.5700.network",
    "p5-http-f.5700.network",
    "p5-http-g.5700.network",
]
BUILD_SERVER = "cs5700cdnproject.ccs.neu.edu"
ORIGIN_SERVER = "cs5700cdnorigin.ccs.neu.edu"
# ./[deploy|run|stop]CDN -p <port> -o <origin> -n <name> -u <username> -i <keyfile>

# ./stopCDN -p 40015 -o cs5700cdnorigin.ccs.neu.edu -n team_t -u team_t -i ~/.ssh/id_ed25519.pub
#

def stop_dns(username, keyfile):
    ssh_command = (
        "ssh -i "
        + keyfile
        + " "
        + username
        + "@"
        + DNS_NODE
        + " 'pkill -u "
        + username
        + " dnsserver'"
    )
    val_1 = os.system(ssh_command)

    ssh_command = (
            "ssh -i "
            + keyfile
            + " "
            + username
            + "@"
            + DNS_NODE
            + " 'pkill -u "
            + username
            + " python3'"
    )
    val_2 = os.system(ssh_command)
    if val_1 == 0 and val_2 == 0:
        print("DNS successfully killed")

    else:
        print(f"Commands Return: {val_1} & {val_2}")
        print("Failed to kill dns, DNS may already be killed")



def stop_http(username, keyfile):
    # STop httpserver to each replica server
    # ssh -i ~/.ssh/id_ed25519.pub team_t@p5-http-a.5700.network 'pkill -u team_t python3'
    for node in HTTP_NODES:
        ssh_command = (
            "ssh -i "
            + keyfile
            + " "
            + username
            + "@"
            + node
            + " 'pkill -u"
            + username
            + " python3'"
        )
        inta = os.system(ssh_command)
        print("KILLED httpserver in node:", node, "return val:", inta)


def main():
    parser = argparse.ArgumentParser(description="Parser for dnsserver args")
    # Required args according to project requirements
    parser.add_argument(
        "-p",
        "--port",
        metavar="",
        type=int,
        help="Port that the dns server will bind to",
    )
    parser.add_argument(
        "-o", "--origin", metavar="", help="origin server containing all html files"
    )
    parser.add_argument(
        "-n",
        "--domain_name",
        metavar="",
        help='domain name for your "customer", i.e. the only domain name your DNS server should resolve to '
             "replica IPs",
    )
    parser.add_argument("-i", "--keyfile", metavar="", help="path to keyfile")
    parser.add_argument(
        "-u", "--username", metavar="", help="username associated with key file"
    )

    # ---------------------------------------------------------------------------------
    # custom args added
    parser.add_argument(
        "-d",
        "--default",
        metavar="",
        help="optional, exclusive arg, if not None default values will be used depending on arg; r for radil, "
             "s for sinhaut "
             "statements",
    )
    parser.add_argument(
        "-s",
        "--display",
        metavar="",
        help="optional arg, if not None displays print statements",
    )
    parser.add_argument(
        "-f",
        "--server_targets",
        metavar="",
        help="optional arg, can be used to apply script to only one server, if 'dns' "
             "then code only applied to dns related code, if 'http' then code only applied to http code",
    )

    args = parser.parse_args()

    required_filled = False

    if args.default != None:
        argUser = args.default.lower()
        if argUser == "r":
            args.keyfile = DEFAULT_R_KEY
        elif argUser == "s":
            args.keyfile = DEFAULT_S_KEY
        else:
            print(f"{args.default} in invalid value, please use 'r' or 's' as args")
            print("EXITING STOP SCRIPT")
            exit(0)

        # set defaults if using default optional arg
        args.port = DEFAULT_PORT
        args.origin = ORIGIN_SERVER
        args.username = DEFAULT_USERNAME
        args.domain_name = DEFAULT_DOMAIN
        required_filled = True
    # --------------------------------------------------------------------------------
    else:
        if args.port is None:
            print("Missing port argument -p")
        elif args.origin is None:
            print("Missing origin argument -o")
        elif args.domain_name is None:
            print("Missing domain name dns must resolve for argument -n")
        elif args.keyfile is None:
            print("Missing keyfile -i")
        elif args.username is None:
            print("Missing username -u -i")
        else:
            required_filled = True

    if required_filled == False:
        print("EXITING STOP SCRIPT")
        exit(0)

    if args.display != None:
        args.display = True
    else:
        args.display = False

    runDNS = True
    runHTTP = True

    if args.server_targets is not None:
        if args.server_targets.lower() == "dns":
            runHTTP = False
        elif args.server_targets.lower() == "http":
            runDNS = False
        else:
            runHTTP = False
            runDNS = False
            print("if using server_target arg (-f) can only be 'dns' or 'http'")
            print("stop script will NOT be applied to dns or http server")
            print("STOP SCRIPT FAILED")
            print("EXITING PROGRAM")
            exit(0)

    print(
        f"USER ENTERED VALUES FOR STOP SCRIPT:"
        f"\nPort:{args.port}"
        f"\nOrigin: {args.origin}"
        f"\nDomain: {args.domain_name}"
        f"\nKeyfile: {args.keyfile}"
        f"\nUsername: {args.username}"
        f"\nExecute stop Script for DNS server?: {runDNS}"
        f"\nExecute stop Script for HTTP server?: {runHTTP}"
    )
    print("------------------------------\n")

    if runDNS == True:
        stop_dns(args.username, args.keyfile)
        print("DNS stop script has run to completion\n")
    if runHTTP == True:
        stop_http(args.username, args.keyfile)
        print("HTTP stop script has run to completion")

#

main()

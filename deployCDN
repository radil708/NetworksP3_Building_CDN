#!/usr/bin/env python3
import os
import argparse

DEFAULT_S_KEY = "~/.ssh/id_ed25519.pub"
DEFAULT_R_KEY = "~/.ssh/id_rsa"
DEFAULT_USERNAME = "team_t"
DEFAULT_PORT = 40015
DEFAULT_DOMAIN = "cs5700cdn.example.com"
DNS_FILE_DEPENDENCIES = [
    "dns.py",
    "dnsDriver.py",
    "dnsserver",
    "geo_db.py",
    "pre_dns_run_setup",
]

DNS_NODE = "p5-dns.5700.network"
HTTP_NODES = [
    "p5-http-a.5700.network",
    "p5-http-b.5700.network",
    "p5-http-c.5700.network",
    "p5-http-d.5700.network",
    "p5-http-e.5700.network",
    "p5-http-f.5700.network",
    "p5-http-g.5700.network",
]
BUILD_SERVER = "cs5700cdnproject.ccs.neu.edu"
ORIGIN_SERVER = "cs5700cdnorigin.ccs.neu.edu"


# ./[deploy|run|stop]CDN -p <port> -o <origin> -n <name> -u <username> -i <keyfile>
# ./deployCDN -p 40015 -o cs5700cdnorigin.ccs.neu.edu -n shouldBeDomainName -u team_t -i ~/.ssh/id_ed25519.pub


def run_copy_to_dns(file_name, keyfile_path, username_in, display=False):
    copy_cmd = f"scp -i {keyfile_path} {file_name} {username_in}@{DNS_NODE}:."

    if display == True:
        print("Running Command: " + copy_cmd)

    os.system(copy_cmd)

    if display == True:
        print("--------------------------------------------------\n")


def deploy_dns(username, keyfile, display=False):
    # copy files to dns server
    if display == True:
        print("Deploying DNS Files to DNS Server:\n")

    # command to turn driver into dnsserver file
    try:
        copy_cmd = "cp dnsDriver.py dnsserver"
        os.system(copy_cmd)
        create_exec_cmd = "chmod u+x dnsserver"
        os.system(create_exec_cmd)
        if display == True:
            print("created fresh copy of ./dnsserver exec\n")
    except Exception as e:
        print(e)
        print("Unable to turn dnsDriver.py into a an executable")

    try:
        dos2cmd = "dos2unix dnsserver"
        os.system(dos2cmd)
        print("\n", end="")
    except Exception as e:
        print(e)
        print("dos2unix command not recognized, Continuing Program")

    # ------------------------------------------------------
    try:
        for file in DNS_FILE_DEPENDENCIES:
            run_copy_to_dns(file, keyfile, username, display)
    except Exception as e:
        print(e)
        print(
            "Failed to deploy DNS, please check all files present and in main directory\n"
            "Required files:\n"
            "1.) dns.py\n"
            "2.) dnsDriver.py\n"
            "3.) dnsserver\n"
            "4.) geo_db.py\n"
            "5.) pre_dns_run_setup\n"
        )
        print("SKIPPING DNS DEPLOY, PROGRAM WILL CONTINUE\n")


def run_geocaching(keyfile, username, dnsserver):
    run_command = (
            "ssh -i "
            + keyfile
            + " "
            + username
            + "@"
            + dnsserver
            + " 'python3 pre_dns_run_setup'"
    )

    running = os.system(run_command)

    if running == 0:
        print("geofile set up complete")
    else:
        print(f"Command returned {running}")
        print("failed to set up geofiles")
        print("Continuing Program\n")


def deploy_http(username, keyfile, display=False):
    # Deploy httpserver to each replica server
    for node in HTTP_NODES:
        if display == True:
            print("Deploying to http server:", node)
        # scp -i ~/.ssh/id_ed25519.pub team_t@p5-http-a.5700.network:.

        scp_command = (
                "scp -i " + keyfile + " httpserver " + username + "@" + node + ":."
        )

        os.system(scp_command)
        ssh_command = (
                "ssh -i "
                + keyfile
                + " "
                + username
                + "@"
                + node
                + " 'chmod 777 /home/"
                + username
                + "/httpserver'"
        )
        os.system(ssh_command)

        if display == True:
            print("Completed httpserver deploy to:", node)
            print("-------------------------------------------------")


def main():
    parser = argparse.ArgumentParser(description="Parser for dnsserver args")
    # Required args according to project requirements
    parser.add_argument(
        "-p",
        "--port",
        metavar="",
        type=int,
        help="Port that the dns server will bind to",
    )
    parser.add_argument(
        "-o", "--origin", metavar="", help="origin server containing all html files"
    )
    parser.add_argument(
        "-n",
        "--domain_name",
        metavar="",
        help='domain name for your "customer", i.e. the only domain name your DNS server should resolve to '
             "replica IPs",
    )
    parser.add_argument("-i", "--keyfile", metavar="", help="path to keyfile")
    parser.add_argument(
        "-u", "--username", metavar="", help="username associated with key file"
    )

    # ---------------------------------------------------------------------------------
    # custom args added
    parser.add_argument(
        "-d",
        "--default",
        metavar="",
        help="optional, exclusive arg, if not None default values will be used depending on arg; r for radil, s for sinhaut "
             "statements",
    )
    parser.add_argument(
        "-s",
        "--display",
        metavar="",
        help="optional arg, if not None displays print statements",
    )
    parser.add_argument(
        "-f",
        "--server_targets",
        metavar="",
        help="optional arg, can be used to apply script to only one server, if 'dns' "
             "then code only applied to dns related code, if 'http' then code only applied to http code",
    )

    args = parser.parse_args()

    required_filled = False

    if args.default != None:
        argUser = args.default.lower()
        if argUser == "r":
            args.keyfile = DEFAULT_R_KEY
        elif argUser == "s":
            args.keyfile = DEFAULT_S_KEY
        else:
            print(f"{args.default} in invalid value, please use 'r' or 's' as args")
            print("EXITING DEPLOY SCRIPT")
            exit(0)

        # set defaults if using default optional arg
        args.port = DEFAULT_PORT
        args.origin = ORIGIN_SERVER
        args.username = DEFAULT_USERNAME
        args.domain_name = DEFAULT_DOMAIN
        required_filled = True
    # --------------------------------------------------------------------------------
    else:
        if args.port is None:
            print("Missing port argument -p")
        elif args.origin is None:
            print("Missing origin argument -o")
        elif args.domain_name is None:
            print("Missing domain name dns must resolve for argument -n")
        elif args.keyfile is None:
            print("Missing keyfile -i")
        elif args.username is None:
            print("Missing username -u -i")
        else:
            required_filled = True

    if required_filled == False:
        print("EXITING DEPLOY SCRIPT")
        exit(0)

    if args.display != None:
        args.display = True
    else:
        args.display = False

    runDNS = True
    runHTTP = True

    if args.server_targets is not None:
        if args.server_targets.lower() == "dns":
            runHTTP = False
        elif args.server_targets.lower() == "http":
            runDNS = False
        else:
            runHTTP = False
            runDNS = False
            print("if using server_target arg (-f) can only be 'dns' or 'http'")
            print("deploy script will NOT be applied to dns or http server")
            print("DEPLOY SCRIPT FAILED")
            print("EXITING PROGRAM")
            exit(0)

    print(
        f"USER ENTERED VALUES FOR DEPLOY SCRIPT:"
        f"\nPort:{args.port}"
        f"\nOrigin: {args.origin}"
        f"\nDomain: {args.domain_name}"
        f"\nKeyfile: {args.keyfile}"
        f"\nUsername: {args.username}"
        f"\nExecute Deploy Script for DNS server?: {runDNS}"
        f"\nExecute Deploy Script for HTTP server?: {runHTTP}"
    )
    print("------------------------------\n")

    if runDNS == True:
        deploy_dns(args.username, args.keyfile, display=True)
        run_geocaching(
            keyfile=args.keyfile,
            username=args.username,
            dnsserver=DNS_NODE
        )
        print("\nDNS DEPLOYMENT SCRIPT HAS BEEN RUN TO COMPLETION")
        print("+++++++++++++++++++++++++++++++++++++++++++++++++++\n")

    if runHTTP == True:
        deploy_http(args.username, args.username, display=True)
        print("\nHTTP DEPLOYMENT SCRIPT HAS BEEN RUN TO COMPLETION")
        print("+++++++++++++++++++++++++++++++++++++++++++++++++++\n")


#
main()

#!/usr/bin/env python
import os
import sys
import threading
import argparse

DEFAULT_S_KEY = "~/.ssh/id_ed25519.pub"
DEFAULT_R_KEY = "~/.ssh/id_rsa"
DEFAULT_USERNAME = "team_t"
DEFAULT_PORT = 40015
DEFAULT_DOMAIN = "cs5700cdn.example.com"
DNS_FILE_DEPENDENCIES = ["dns.py", "dnsDriver.py", "dnsserver", "geo_db.py"]

DNS_NODE = "p5-dns.5700.network"
HTTP_NODES = [
    "p5-http-a.5700.network",
    "p5-http-b.5700.network",
    "p5-http-c.5700.network",
    "p5-http-d.5700.network",
    "p5-http-e.5700.network",
    "p5-http-f.5700.network",
    "p5-http-g.5700.network",
]
BUILD_SERVER = "cs5700cdnproject.ccs.neu.edu"
ORIGIN_SERVER = "cs5700cdnorigin.ccs.neu.edu"

# ./runCDN -p 40015 -o cs5700cdnorigin.ccs.neu.edu -n team_t -u team_t -i ~/.ssh/id_ed25519.pub


def run_dns(port, username, keyfile, domain_name, display = False):
    # Run dnsserver.py on dns node
    run_command = (
        "ssh -i "
        + keyfile
        + " "
        + username
        + "@"
        + DNS_NODE
        + " './dnsserver -p "
        + str(port)
        + " -n "
        + domain_name
        + "'"
    )
    if display == True:
        print("Running dns command:\n")
    os.system(run_command)


def thread_runs(port, username, origin, keyfile, display=False):
    threads = []
    for node in HTTP_NODES:
        t = threading.Thread(
            target=run_http, args=(node, port, username, origin, keyfile,display)
        )
        t.setDaemon(True)
        threads.append(t)

    for t in threads:
        t.start()

    for t in threads:
        t.join()


def run_http(node, port, username, origin, keyfile,display=False):
    # ssh -i ~/.ssh/id_ed25519.pub team_t@p5-http-d.5700.network './httpserver -p 40015 -o origin'
    # Run httpserver on each replica server
    # for node in HTTP_NODES:
    run_command = (
        "ssh -i "
        + keyfile
        + " "
        + username
        + "@"
        + node
        + " nohup ./httpserver -p "
        + str(port)
        + " -o "
        + origin
        + " &"
    )

    running = os.system(run_command)
    if display == True:
        print("Running httpserver on", node, "command returns:", running)
    # subprocess.run(args=run_command, shell=True, check=True)


def main():
    parser = argparse.ArgumentParser(description="Parser for dnsserver args")
    # Required args according to project requirements
    parser.add_argument(
        "-p",
        "--port",
        metavar="",
        type=int,
        help="Port that the dns server will bind to",
    )
    parser.add_argument(
        "-o", "--origin", metavar="", help="origin server containing all html files"
    )
    parser.add_argument(
        "-n",
        "--domain_name",
        metavar="",
        help='domain name for your "customer", i.e. the only domain name your DNS server should resolve to '
        "replica IPs",
    )
    parser.add_argument("-i", "--keyfile", metavar="", help="path to keyfile")
    parser.add_argument(
        "-u", "--username", metavar="", help="username associated with key file"
    )

    # ---------------------------------------------------------------------------------
    # custom args added
    parser.add_argument(
        "-d",
        "--default",
        metavar="",
        help="optional, exclusive arg, if not None default values will be used depending on arg; r for radil, s for sinhaut "
        "statements",
    )
    parser.add_argument(
        "-s",
        "--display",
        metavar="",
        help="optional arg, if not None displays print statements",
    )
    args = parser.parse_args()

    if args.default != None:
        argUser = args.default.lower()
        if argUser == "r":
            args.keyfile = DEFAULT_R_KEY
        elif argUser == "s":
            args.keyfile = DEFAULT_S_KEY
        else:
            print(args.default, " is invalid value, please use 'r' or 's' as args")
            print("EXITING RUN SCRIPT")
            exit(0)

        args.port = DEFAULT_PORT

        args.origin = ORIGIN_SERVER
        args.username = DEFAULT_USERNAME
        args.display = 1
        args.domain_name = DEFAULT_DOMAIN
    # --------------------------------------------------------------------------------
    else:
        if (
            args.port == None
            or args.origin == None
            or args.domain_name == None
            or args.keyfile == None
            or args.username == None
        ):
            print("MISSING AN ARGUMENT -p, -o, -n, -i, or -u")
            print("EXITING RUN SCRIPT")
            exit(0)

    print(
        "USER ENTERED VALUES FOR RUN SCRIPT:",
        "\nPort:",
        args.port,
        "\nOrigin:",
        args.origin,
        "\nDomain:",
        args.domain_name,
        "\nKeyfile:",
        args.keyfile,
        "\nUsername:",
        args.username,
    )
    print("------------------------------\n")

    if args.display != None:
        args.display = True
    else:
        args.display = False

    run_dns(args.port, args.username, args.keyfile, args.domain_name, args.display)
    thread_runs(args.port, args.username, args.origin, args.keyfile,args.display)
    # run_http(port, username, origin_server, keyfile)


main()

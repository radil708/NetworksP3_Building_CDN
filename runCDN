#!/usr/bin/env python3
import os
import sys
import threading
import argparse

DEFAULT_S_KEY = "~/.ssh/id_ed25519.pub"
DEFAULT_R_KEY = "~/.ssh/id_rsa"
DEFAULT_USERNAME = "team_t"
DEFAULT_PORT = 40015
DEFAULT_DOMAIN = "cs5700cdn.example.com"
DNS_FILE_DEPENDENCIES = ["dns.py", "dnsDriver.py", "dnsserver", "geo_db.py"]

DNS_NODE = "p5-dns.5700.network"
HTTP_NODES = [
    "p5-http-a.5700.network",
    "p5-http-b.5700.network",
    "p5-http-c.5700.network",
    "p5-http-d.5700.network",
    "p5-http-e.5700.network",
    "p5-http-f.5700.network",
    "p5-http-g.5700.network",
]
BUILD_SERVER = "cs5700cdnproject.ccs.neu.edu"
ORIGIN_SERVER = "cs5700cdnorigin.ccs.neu.edu"

# ./runCDN -p 40015 -o cs5700cdnorigin.ccs.neu.edu -n team_t -u team_t -i ~/.ssh/id_ed25519.pub


def run_dns(port, username, keyfile, domain_name, dns_display):
    # Run dnsserver on dns node

    if dns_display == False:
        run_command = (
            "ssh -i "
            + keyfile
            + " "
            + username
            + "@"
            + DNS_NODE
            + " nohup ./dnsserver -p "
            + str(port)
            + " -n "
            + domain_name
            + " &"
        )
    else:
        run_command = (
                "ssh -i "
                + keyfile
                + " "
                + username
                + "@"
                + DNS_NODE
                + " nohup ./dnsserver -p "
                + str(port)
                + " -n "
                + domain_name
                + " -s 1" # display var
                + " &"
        )

    value = os.system(run_command)

    if value == 0:
        print("DNS RUN COMMAND SUCCESSFULLY SENT\n")
        print("Please wait a few seconds before sending requests")
        print("++++++++++++++++++++++++++++++++++++\n")
    else:
        print(f"DNS RUN RETURNED {value}")
        print("DNS RUN FAILED")
        print("CONTINUING PROGRAM")
        print("++++++++++++++++++++++++++++++++++++\n")


def thread_runs(port, username, origin, keyfile,display=False):
    threads = []
    for node in HTTP_NODES:
        t = threading.Thread(
            target=run_http, args=(node, port, username, origin, keyfile,display)
        )
        t.setDaemon(True)
        threads.append(t)

    for t in threads:
        t.start()

    for t in threads:
        t.join()


def run_http(node, port, username, origin, keyfile, display=False):
    # ssh -i ~/.ssh/id_ed25519.pub team_t@p5-http-d.5700.network './httpserver -p 40015 -o origin'
    # Run httpserver on each replica server
    # for node in HTTP_NODES:

    if display == False:
        run_command = (
            "ssh -i "
            + keyfile
            + " "
            + username
            + "@"
            + node
            + " nohup ./httpserver -p "
            + str(port)
            + " -o "
            + origin
            + " &"
        )
    else:
        run_command = (
                "ssh -i "
                + keyfile
                + " "
                + username
                + "@"
                + node
                + " nohup ./httpserver -p "
                + str(port)
                + " -o "
                + origin
                + " -s 1"
                + " &"
        )


    running = os.system(run_command)

    print("Running httpserver on", node, "command returns:", running)
    # subprocess.run(args=run_command, shell=True, check=True)


def main():
    parser = argparse.ArgumentParser(description="Parser for dnsserver args")
    # Required args according to project requirements
    parser.add_argument(
        "-p",
        "--port",
        metavar="",
        type=int,
        help="Port that the dns server will bind to",
    )
    parser.add_argument(
        "-o", "--origin", metavar="", help="origin server containing all html files"
    )
    parser.add_argument(
        "-n",
        "--domain_name",
        metavar="",
        help='domain name for your "customer", i.e. the only domain name your DNS server should resolve to '
             "replica IPs",
    )
    parser.add_argument("-i", "--keyfile", metavar="", help="path to keyfile")
    parser.add_argument(
        "-u", "--username", metavar="", help="username associated with key file"
    )

    # ---------------------------------------------------------------------------------
    # custom args added
    parser.add_argument(
        "-d",
        "--default",
        metavar="",
        help="optional, exclusive arg, if not None default values will be used depending on arg; r for radil, "
             "s for sinhaut "
    )
    parser.add_argument(
        "-s",
        "--display",
        metavar="",
        help="optional arg, if not None displays print statements",
    )
    parser.add_argument(
        "-f",
        "--server_targets",
        metavar="",
        help="optional arg, can be used to apply script to only one server, if 'dns' "
             "then code only applied to dns related code, if 'http' then code only applied to http code",
    )

    args = parser.parse_args()

    required_filled = False

    if args.default != None:
        argUser = args.default.lower()
        if argUser == "r":
            args.keyfile = DEFAULT_R_KEY
        elif argUser == "s":
            args.keyfile = DEFAULT_S_KEY
        else:
            print(f"{args.default} in invalid value, please use 'r' or 's' as args")
            print("EXITING RUN SCRIPT")
            exit(0)

        # set defaults if using default optional arg
        args.port = DEFAULT_PORT
        args.origin = ORIGIN_SERVER
        args.username = DEFAULT_USERNAME
        args.domain_name = DEFAULT_DOMAIN
        required_filled = True
    # --------------------------------------------------------------------------------
    else:
        if args.port is None:
            print("Missing port argument -p")
        elif args.origin is None:
            print("Missing origin argument -o")
        elif args.domain_name is None:
            print("Missing domain name dns must resolve for argument -n")
        elif args.keyfile is None:
            print("Missing keyfile -i")
        elif args.username is None:
            print("Missing username -u -i")
        else:
            required_filled = True

    if required_filled == False:
        print("EXITING RUN SCRIPT")
        exit(0)

    if args.display != None:
        args.display = True
    else:
        args.display = False

    runDNS = True
    runHTTP = True

    if args.server_targets is not None:
        if args.server_targets.lower() == "dns":
            runHTTP = False
        elif args.server_targets.lower() == "http":
            runDNS = False
        else:
            runHTTP = False
            runDNS = False
            print("if using server_target arg (-f) can only be 'dns' or 'http'")
            print("run script will NOT be applied to dns or http server")
            print("run SCRIPT FAILED")
            print("EXITING PROGRAM")
            exit(0)

    print(
        f"USER ENTERED VALUES FOR RUN SCRIPT:"
        f"\nPort: {args.port}"
        f"\nOrigin: {args.origin}"
        f"\nDomain: {args.domain_name}"
        f"\nKeyfile: {args.keyfile}"
        f"\nUsername: {args.username}"
        f"\nShould Server(s) Print Statements to Terminal?: {args.display}"
        f"\nExecute Run Script for DNS server?: {runDNS}"
        f"\nExecute Run Script for HTTP server?: {runHTTP}"
    )
    print("------------------------------\n")

    if runHTTP == True:
        thread_runs(args.port, args.username, args.origin, args.keyfile,display=args.display)
    if runDNS == True:
        run_dns(args.port, args.username, args.keyfile, args.domain_name, dns_display=args.display)


    # run_http(port, username, origin_server, keyfile)


main()
